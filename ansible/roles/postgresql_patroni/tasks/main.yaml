---
- name: ensure dnf cache is up to date
  ansible.builtin.dnf: 
    update_cache: true

- name: Reset postgres module list
  ansible.builtin.shell: yes | dnf module reset postgresql

- name: Enable PostgreSQL {{pg_version}} module
  ansible.builtin.shell: yes | dnf module enable postgresql:{{pg_version}}

- name: Install Postgresql
  ansible.builtin.dnf:
    name: postgresql-server
    state: latest

- name: Install Postgresql
  ansible.builtin.dnf:
    name: python3-psycopg2
    state: latest

- name: Install PGAudit
  ansible.builtin.dnf:
    name: pgaudit
    state: latest

- name: Postgresql configuration files
  block:
  - name: Check if output directory exists
    ansible.builtin.stat:
      path: /etc/postgresql/{{pg_version}}
    register: output_folder
  - name: Create postgresql directory
    ansible.builtin.file:
      path: /etc/postgresql/{{pg_version}}
      state: directory
      owner: postgres
      group: postgres
      mode: 0700
    when: output_folder.stat.exists == false
  - name: Copy service configuration files
    ansible.builtin.template:
      src: "{{ item }}.j2"
      dest: /etc/postgresql/{{pg_version}}/{{ item }}
      owner: postgres
      group: postgres
      mode: 0700
    loop:
      - pg_hba.conf
      - pg_ident.conf
      - postgresql.conf
    diff: true
    notify:
      - restart

- name: Postgresql directory
  block:
  - name: Check directory exist
    ansible.builtin.stat:
      path: "{{ pg_datadir }}/data"
    register: output_folder
  - name: Create postgresql directory
    ansible.builtin.file:
      path: "{{ pg_datadir }}/data"
      state: directory
      owner: postgres
      group: postgres
      mode: 0700
    when: output_folder.stat.exists == false
  - name: Check directory exist
    ansible.builtin.stat:
      path: "{{ pg_datadir }}/logs"
    register: output_folder
  - name: Create postgresql directory
    ansible.builtin.file:
      path: "{{ pg_datadir }}/logs"
      state: directory
      owner: postgres
      group: postgres
      mode: 0700
    when: output_folder.stat.exists == false
  
- name: Initialize DB
  block:
  - name: Check DB catalog
    ansible.builtin.stat:
      path: "{{ pg_datadir }}/data/base"
    register: output_folder
  - name: init DB
    shell: postgresql-setup initdb
    when: output_folder.stat.exists == false
    notify:
    - start

- name: Permit traffic in default zone on port {{pg_port}}/tcp
  ansible.builtin.firewalld:
    port: "{{pg_port}}/tcp"
    permanent: true
    state: enabled

- name: Create PostgreSQL User
  community.postgresql.postgresql_user:
    name: "{{ pg_user }}"
    password: "{{ pg_user_pass }}"
    role_attr_flags: "REPLICATION" 


- name: Перезапустить сервис снова
  ansible.builtin.meta: flush_handlers